AWSTemplateFormatVersion: "2010-09-09"
Description: A sample template
Mappings:
  SubnetConfig:
    VPC:
      CIDR: "172.16.0.0/16"
    Public:
      CIDR: "172.16.1.0/24"
    Private:
      CIDR: "172.16.2.0/24"
#Defining the resources
Resources:
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      EnableDnsSupport: "true"
      EnableDnsHostnames: "true"
      CidrBlock:
        Fn::FindInMap:
          - "SubnetConfig"
          - "VPC"
          - "CIDR"
      Tags:
        -
          Key: "Application"
          Value:
            Ref: "AWS::StackName"
        -
          Key: "Network"
          Value: "Public"
        -
          Key: "Name"
          Value: "SMAPI DEV"
#Define the Subnet Public + Private
 #PublicSubnet
  PublicSubnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId:
        Ref: "VPC"
      CidrBlock:
        Fn::FindInMap:
          - "SubnetConfig"
          - "Public"
          - "CIDR"
#      MapPublicIpOnLaunch: "true"
      Tags:
         -
           Key: "Application"
           Value:
             Ref: "AWS::StackName"
         -
           Key: "Network"
           Value: "Public"
         -
           Key: "Name"
           Value: "Public"
  #PrivateSubnet
  PrivateSubnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId:
        Ref: "VPC"
      CidrBlock:
        Fn::FindInMap:
          - "SubnetConfig"
          - "Private"
          - "CIDR"
      Tags:
         -
           Key: "Application"
           Value:
             Ref: "AWS::StackName"
         -
           Key: "Network"
           Value: "Private"
         -
           Key: "Name"
           Value: "Private"
#Internet Gateway
  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        -
          Key: "Application"
          Value:
            Ref: "AWS::StackName"
        -
          Key: "Network"
          Value: "Public"
        -
          Key: "Name"
          Value: "SMAPI DEV IGW"
  GatewayToInternet:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId:
        Ref: "VPC"
      InternetGatewayId:
        Ref: "InternetGateway"
#NAT Gateway
  NATGateway:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId:
        Fn::GetAtt:
          - "ElasticIP"
          - "AllocationId"
      SubnetId:
        Ref: "PublicSubnet"
      Tags:
        -
          Key: "Application"
          Value:
            Ref: "AWS::StackName"
        -
          Key: "Name"
          Value: "SMAPI DEV NGW"
  ElasticIP:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: "vpc"
#Route tables Publis + Private
  #PublicRouteTable
  PublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId:
        Ref: "VPC"
      Tags:
        -
          Key: "Application"
          Value:
            Ref: "AWS::StackName"
        -
          Key: "Network"
          Value: "Public"
  #PublicRoute
  PublicRoute:
    Type: "AWS::EC2::Route"
    DependsOn: "GatewayToInternet"
    Properties:
      RouteTableId:
        Ref: "PublicRouteTable"
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId:
        Ref: "InternetGateway"
  PublicSubnetRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId:
        Ref: "PublicSubnet"
      RouteTableId:
        Ref: "PublicRouteTable"
 #PrivateRouteTabel
  PrivateRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId:
        Ref: "VPC"
      Tags:
        -
          Key: "Application"
          Value:
            Ref: "AWS::StackName"
        -
          Key: "Network"
          Value: "Private"
  #PrivateRoute
  PrivateRoute:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId:
        Ref: "PrivateRouteTable"
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId:
        Ref: "NATGateway"
  PrivateSubnetRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId:
        Ref: "PrivateSubnet"
      RouteTableId:
        Ref: "PrivateRouteTable"
# Network ACL Public + Private
  #Public ACL
  PublicNetworkAcl:
    Type: "AWS::EC2::NetworkAcl"
    Properties:
      VpcId:
        Ref: "VPC"
      Tags:
        -
          Key: "Application"
          Value:
            Ref: "AWS::StackName"
        -
          Key: "Network"
          Value: "Public"
  InboundHTTPPublicNetworkAclEntry:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId:
        Ref: "PublicNetworkAcl"
      RuleNumber: "100"
      Protocol: "-1"
      RuleAction: "allow"
      Egress: "false"
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: "0"
        To: "65535"
  OutboundPublicNetworkAclEntry:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId:
        Ref: "PublicNetworkAcl"
      RuleNumber: "100"
      Protocol: "-1"
      RuleAction: "allow"
      Egress: "true"
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: "0"
        To: "65535"
  PublicSubnetNetworkAclAssociation:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId:
        Ref: "PublicSubnet"
      NetworkAclId:
        Ref: "PublicNetworkAcl"
#Output
Outputs:
  VPCId:
    Description: "VPCId of the newly created VPC"
    Value:
      Ref: "VPC"
    Export:
      Name: !Sub ${AWS::StackName}-VPC
#    Export:
#      Name:
#        !Join ['-', [!Ref 'AWS::Region', !Sub '${AWS::StackName}', 'VPC']]
  PublicSubnet:
    Description: "SubnetId of the public subnet"
    Value:
      Ref: "PublicSubnet"
#    Export:
#      Name:
#        !Join ['-', [!Ref 'AWS::Region', !Sub '${AWS::StackName}', 'PublicSubnet']]
  PrivateSubnet:
    Description: "SubnetId of the private subnet"
    Value:
      Ref: "PrivateSubnet"
#      Export:
#        Name:
#          !Join ['-', [!Ref 'AWS::Region', !Sub '${AWS::StackName}', 'PrivateSubnet']]
